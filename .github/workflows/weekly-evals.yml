name: Weekly RAG Evaluations

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual trigger from GitHub UI
    inputs:
      run_basic:
        description: 'Run Basic RAG Evaluation'
        required: false
        default: true
        type: boolean
      run_multiturn:
        description: 'Run Multi-turn Evaluation'
        required: false
        default: true
        type: boolean
      reason:
        description: 'Reason for running evaluation'
        required: false
        default: 'Manual trigger'
        type: string
  pull_request:  # Also run on PRs for continuous testing
    paths:
      - 'src/**'
      - 'evals/**'
      - '.github/workflows/weekly-evals.yml'

jobs:
  eval-basic:
    name: Run Basic RAG Evaluation
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.run_basic
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Basic Evaluation
      run: python evals/eval_basic.py
      env:
        BRAINTRUST_API_KEY: ${{ secrets.BRAINTRUST_API_KEY }}
        BRAINTRUST_PROJECT_NAME: ${{ vars.BRAINTRUST_PROJECT_NAME }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        VOYAGEAI_API_KEY: ${{ secrets.VOYAGEAI_API_KEY }}
        INDEX_NAME: ${{ vars.INDEX_NAME }}
    

  eval-multiturn:
    name: Run Multi-turn Conversation Evaluation
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.run_multiturn
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Multi-turn Evaluation
      run: python evals/eval_multiturn.py
      env:
        BRAINTRUST_API_KEY: ${{ secrets.BRAINTRUST_API_KEY }}
        BRAINTRUST_PROJECT_NAME: ${{ vars.BRAINTRUST_PROJECT_NAME }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        VOYAGEAI_API_KEY: ${{ secrets.VOYAGEAI_API_KEY }}
        INDEX_NAME: ${{ vars.INDEX_NAME }}
    

  summary:
    name: Post Evaluation Summary
    needs: [eval-basic, eval-multiturn]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Braintrust CLI
      run: |
        pip install braintrust
    
    - name: Generate and Post Evaluation Summary
      env:
        BRAINTRUST_API_KEY: ${{ secrets.BRAINTRUST_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the latest experiments from Braintrust
        python3 << 'EOF'
        import os
        import json
        import requests
        from datetime import datetime, timedelta
        
        # Get recent experiments (last 24 hours)
        headers = {
            "Authorization": f"Bearer {os.getenv('BRAINTRUST_API_KEY')}",
            "Content-Type": "application/json"
        }
        
        # Fetch recent experiments
        response = requests.get(
            "https://api.braintrust.dev/v1/experiment",
            headers=headers,
            params={
                "project_name": "rag-braintrust-bot",
                "limit": 10
            }
        )
        
        if response.status_code == 200:
            experiments = response.json()["objects"]
            
            # Filter experiments from this run (last hour)
            recent_time = datetime.now() - timedelta(hours=1)
            recent_experiments = [
                exp for exp in experiments 
                if datetime.fromisoformat(exp["created"].replace("Z", "+00:00")) > recent_time
            ]
            
            if recent_experiments:
                comment_body = "## 🧠 Braintrust Evaluation Results\n\n"
                comment_body += f"**Run Date:** {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}\n"
                comment_body += f"**Experiments:** {len(recent_experiments)}\n\n"
                
                for exp in recent_experiments:
                    name = exp.get("name", "Unknown")
                    scores = exp.get("scores", {})
                    
                    comment_body += f"### 📊 {name}\n"
                    
                    if scores:
                        comment_body += "| Metric | Score | Change |\n"
                        comment_body += "|--------|-------|--------|\n"
                        
                        for metric, value in scores.items():
                            if isinstance(value, (int, float)):
                                score_str = f"{value:.2%}" if 0 <= value <= 1 else f"{value:.3f}"
                            else:
                                score_str = str(value)
                            comment_body += f"| {metric} | {score_str} | - |\n"
                    else:
                        comment_body += "_No scores available_\n"
                    
                    # Add experiment link
                    exp_url = f"https://www.braintrust.dev/app/carlos/p/rag-braintrust-bot/experiments/{exp.get('id', '')}"
                    comment_body += f"🔗 [View Experiment]({exp_url})\n\n"
                
                comment_body += "---\n"
                comment_body += "💡 **View all results:** [Braintrust Dashboard](https://www.braintrust.dev/app/carlos/p/rag-braintrust-bot)\n"
                
                # Post as PR comment
                pr_number = os.getenv('GITHUB_REF_NAME').split('/')[0] if 'pull' in os.getenv('GITHUB_REF', '') else None
                if pr_number:
                    github_token = os.getenv('GITHUB_TOKEN')
                    repo = os.getenv('GITHUB_REPOSITORY')
                    
                    comment_data = {"body": comment_body}
                    comment_response = requests.post(
                        f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments",
                        headers={
                            "Authorization": f"token {github_token}",
                            "Content-Type": "application/json"
                        },
                        json=comment_data
                    )
                    
                    if comment_response.status_code == 201:
                        print("✅ Posted evaluation summary to PR")
                    else:
                        print(f"❌ Failed to post comment: {comment_response.status_code}")
            else:
                print("No recent experiments found")
        else:
            print(f"Failed to fetch experiments: {response.status_code}")
        EOF